Authors:     g-coders 
Created:     February 21, 2012 
Revised:     April 28, 2012
Description: Where we are in our project.
*******************************************************************************

Next steps:

notary.c:

* include all fingerprints in fingerprintList within the response (not just
   the first one)
* compute timestamp in cache_insert
* test cache functions
* implement is_url_safe()
* finish implementing execute_query()
* Test the case when the notary is running on a different machine
* put *.txt files in their own directory (requires changes in the code where 
  they are used)
* test blacklist.c
* write a bash script to make notary a proper service (start,stop,restart...)
* write a chache cleaner that remove expired certificates from trusted
* Perform fuzz testing using input from files which exist in testing directory

The plan:

* Identify the most essential components of the project and create C files
  which correspond to those components. Describe the purpose of each C file in
  the project.
* Since a web server forms the core of the software, identify an appropriate
  library that provides the needed web functionality. Learn how to use this
  library for the project.
* Identify data structures to represent the data being processed by the
  program.
* Write some integration tests to test the functionality of the entire program.
* Since we decided to use top-down approach, write function stubs  that
  represent the distinct steps in the verification process. Identify
  functionality needed by those functions that might already be implemented in
  a C library. For example, since we decided to include a cache in the
  prototype, we need to find an appropriate database to store the cached
  fingerprints. Thus, we probably need to look for an mysql C library.
* Write unit tests to test the identified higher order functions. This could
  be done simultaneously if those developing tests and those implementing the 
  functions are different people or different groups. 
* Write a basic implementation of these higher order functions to create a
  functioning prototype of the program. 
* When a new (helper) function needs to be written, write only the prototype 
  first. Then write unit tests for this function and only after writing the
  tests implement the function.
* Once the prototype is implemented and passing all tests, identify extensions
  to the prototype which can be added. Refer to the project proposal for
  suggested extensions. Follow a similar development process
  with these extensions as with the prototype.
